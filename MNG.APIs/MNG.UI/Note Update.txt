20231116	frmPouringIntoMold.cs	frmPouringIntoMold()	add	
            if(NewPouring.Defect == null)
                NewPouring.Defect = new DefectCause();
            if (NewPouring.QInspect == null)
                NewPouring.QInspect = new QAInspection();
--------------------------------------------------------------
202311182   LightTower_ChemicalInLader  LightTower_ChemicalInLader  add
            ModbusClient master; 
            public LightTower_ChemicalInLader()
            {
                master = new ModbusClient();
                master.Baudrate = 9600;
                master.Port = 4;
                master.ConnectionTimeout = 5000;
                try
                {
                    master.Connect();
                }
                catch 
                {
                    MessageBox.Show("ไม่สามารถเชื่อมต่อกับไฟแสดงสถานะค่าเคมีได้ โปรดตรวจสอบอุปกรณ์ใหม่อีกครั้ง");
                }
            }

            public void ResultChem(bool _isComplete, bool _isPassed, string _kanbanCode)
            {
                if (master.Connected | true)
                {
                    if (_isComplete)
                    {
                        FontDialog fontDialog = new FontDialog();
                    
                        if (_isPassed)
                        {
                            master.WriteSingleCoil(0, true);
                            master.WriteSingleCoil(1, false);

                            DialogResult dr = MessageBox.Show($"Kanban : {_kanbanCode}\nค่าเคมีผ่าน", "ผลการตรวจสอบค่าเคมี", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            if (dr == DialogResult.Yes)
                            {
                                master.WriteSingleCoil(0, false);
                                master.WriteSingleCoil(1, false);
                            }
                        }
                        else
                        {
                            master.WriteSingleCoil(0, false);
                            master.WriteSingleCoil(1, true);

                            DialogResult dr = MessageBox.Show($"Kanban : {_kanbanCode}\nค่าเคมีไม่ผ่าน โปรดทบทวนการเทน้ำเหล็ก", "ผลการตรวจสอบค่าเคมี", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            if (dr == DialogResult.Yes)
                            {
                                master.WriteSingleCoil(0, false);
                                master.WriteSingleCoil(1, false);
                            }
                        }
                    }
                }
            }
--------------------------------------------------------------
20231118    frmPouring  frmPouring_Load()   edit
            fPouring = new frmPouringIntoMold(Line, true);
--------------------------------------------------------------
20231118    frmPouringIntoMold  frmPouringIntoMold  edit
            private LightTower_ChemicalInLader lightChem;

            public frmPouringIntoMold(string _line, bool connectLight)
            {
                InitializeComponent();

                var url = Properties.Settings.Default.API_URL;
                _client = new Client(url);

                _pourings = new List<Pouring>();
                MeltInfo = new MeltingEventArgs();
                CurrentLotNo = new LotNo();
                CurrentKanban = new Kanban();
                CurrentControlPlan = new ControlPlan();
                CurrentPouring = new Pouring();
                CurrentPourStandard = new PourStandard();
                CurrentProduct = new Product();
                CurrentTooling = new Tooling();
                PLine = _line;

                lightChem = new LightTower_ChemicalInLader();
            }
            
            if(NewPouring.Defect == null)
                NewPouring.Defect = new DefectCause();
            if (NewPouring.QInspect == null)
                NewPouring.QInspect = new QAInspection();

            if(lightChem != null)
                        lightChem.ResultChem((bool)CurrentKanban.IsCompleted, (bool)CurrentKanban.IsPassed, CurrentKanban.Code);
--------------------------------------------------------------
20231121    frmMaterial startKwHrTextBox_TextChanged    edit
            tbKwHrPerCharge.Text = kwDiff.ToString();   
            --->    
            tbKwHrPerCharge.Text = string.Format("{0:0.00}", kwDiff);
--------------------------------------------------------------
20231122    frmTestChem.cs  testChemicalCompositionBindingSource_CurrentChanged()   edit
            MessageBox.Show("Unable to Load Data xxx", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            --->    
            string message = "Connection error.";
                if(prod.ControlPlans.Count == 0)
                {
                    message = "not have ControlPlans.";
                }
                MessageBox.Show($"Unable to Load Data becuase {message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
--------------------------------------------------------------
20231202    frmMaterial.cs  startKwHrTextBox_TextChanged()  edit
            tbKwHrPerCharge.Text = kwDiff.ToString();
            --->
            tbKwHrPerCharge.Text = string.Format("{0:0.00}", kwDiff);
--------------------------------------------------------------
20231202    frmQA.cs    
            >>>add
            private bool EditMode = false;
            private void GraphiteImg_DoubleClick(object sender, EventArgs e)
            private void MatrixImg_DoubleClick(object sender, EventArgs e)
            private void getImageCurrent(Pouring _pouring)
            >>>edit
            public frmQA(Pouring _pouring, Product _product) ---> public frmQA(Pouring _pouring, Product _product, MaterialSpecification _matSpec)
            public void ChangeMode(bool isEdit) ---> public void ChangeMode(bool isEdit, Pouring _pouring)
            
            public frmQA(Pouring _pouring, Product _product, MaterialSpecification _matSpec)    >>>add
            materialSpecificationBindingSource.DataSource = _matSpec;

            public void ChangeMode(bool isEdit, Pouring _pouring)   >>>add
            var listTextBox = this.pnHeader.Controls.OfType<TextBox>().ToList();
            for (int i = 0; i < listTextBox.Count(); i++)
            {
                listTextBox[i].ReadOnly = true;
            }

            EditMode = isEdit;
            if(EditMode)
            {
                getImageCurrent(_pouring);
                var defaultImg = MNG.UI.Properties.Resources.InsertImage;
                if(_pouring.QInspect.GraphiteImg == null)
                    GraphiteImg.Image = defaultImg;
                if(_pouring.QInspect.MatrixImg == null)
                    MatrixImg.Image = defaultImg;

                graphiteATextBox1.ReadOnly = false;
                nodularityTextBox.ReadOnly = false;
                sizeTextBox.ReadOnly = false;
                countTextBox.ReadOnly = false;
                ferriteTextBox.ReadOnly = false;
                pearliteTextBox.ReadOnly = false;
                cementiteTextBox.ReadOnly = false;
                hardnessTextBox.ReadOnly = false;
                tensileTextBox1.ReadOnly = false;
                yeildTextBox.ReadOnly = false;
                elongationTextBox1.ReadOnly = false;
            }

            public async void PouringIntoMoldChanged(object sender, MeltingEventArgs e) >>>add
            getImageCurrent(CurrentPouring);

            public async void EditItem()    >>>edit
            frmQA fQA = new frmQA(CurrentPouring, CurrentProduct);
            --->
            frmQA fQA = new frmQA(CurrentPouring, CurrentProduct, CurrentMatSpec);  >>>add
            try
            {
                await _client.PutPouringInspectionAsync(fQA.PouringItem.Code, fQA.PouringItem);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("201"))
                {

                }
                else
                {
                    MessageBox.Show("ERROR " + ex.Message, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            finally
            {
                CurrentPouring = await _client.GetPouringByIdAsync(CurrentPouring.Code);
                pouringBindingSource.DataSource = CurrentPouring;
                getImageCurrent(CurrentPouring);
            }
            frmEditQC_Load(null, null);

            private void btnSave_Click_1(object sender, EventArgs e)    >>>add
            if (GraphiteImg.Image.RawFormat != null)
            {
                ImageConverter converter = new ImageConverter();
                PouringItem.QInspect.GraphiteImg = (byte[])converter.ConvertTo(GraphiteImg.Image, typeof(byte[]));
            }
            if (MatrixImg.Image.RawFormat != null)
            {
                ImageConverter converter = new ImageConverter();
                PouringItem.QInspect.MatrixImg = (byte[])converter.ConvertTo(MatrixImg.Image, typeof(byte[]));
            }
            private void GraphiteImg_DoubleClick(object sender, EventArgs e)
            {
            if(!EditMode) return;

            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                InitialDirectory = @"D:\",
                Title = "Browse Image Files",

                CheckFileExists = true,
                CheckPathExists = true,

                Filter = "Image files(*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png",
                RestoreDirectory = true,

                ReadOnlyChecked = true,
                ShowReadOnly = true
            };

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                Bitmap bit = new Bitmap(openFileDialog1.FileName);
                var destRect = new Rectangle(0, 0, 320, 240);
                var destImage = new Bitmap(320, 240);

                destImage.SetResolution(bit.HorizontalResolution, bit.VerticalResolution);

                using (var graphics = Graphics.FromImage(destImage))
                {
                    graphics.CompositingMode = CompositingMode.SourceCopy;
                    graphics.CompositingQuality = CompositingQuality.HighQuality;
                    graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    graphics.SmoothingMode = SmoothingMode.HighQuality;
                    graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                    using (var wrapMode = new ImageAttributes())
                    {
                        wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                        graphics.DrawImage(bit, destRect, 0, 0, bit.Width, bit.Height, GraphicsUnit.Pixel, wrapMode);
                    }
                }

                GraphiteImg.Image = destImage;
                }
            }

            private void MatrixImg_DoubleClick(object sender, EventArgs e)
            {
                if(!EditMode) return;

                OpenFileDialog openFileDialog1 = new OpenFileDialog
                {
                    InitialDirectory = @"D:\",
                    Title = "Browse Image Files",

                    CheckFileExists = true,
                    CheckPathExists = true,

                    Filter = "Image files(*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png",
                    RestoreDirectory = true,

                    ReadOnlyChecked = true,
                    ShowReadOnly = true
                };

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    Bitmap bit = new Bitmap(openFileDialog1.FileName);
                    var destRect = new Rectangle(0, 0, 320, 240);
                    var destImage = new Bitmap(320, 240);

                    destImage.SetResolution(bit.HorizontalResolution, bit.VerticalResolution);

                    using (var graphics = Graphics.FromImage(destImage))
                    {
                        graphics.CompositingMode = CompositingMode.SourceCopy;
                        graphics.CompositingQuality = CompositingQuality.HighQuality;
                        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        graphics.SmoothingMode = SmoothingMode.HighQuality;
                        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                        using (var wrapMode = new ImageAttributes())
                        {
                            wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                            graphics.DrawImage(bit, destRect, 0, 0, bit.Width, bit.Height, GraphicsUnit.Pixel, wrapMode);
                        }
                    }

                    MatrixImg.Image = destImage;
                }
            }

            private void getImageCurrent(Pouring _pouring)
            {
                if (_pouring.QInspect.GraphiteImg != null)
                {
                    var graphiteImgCurrent = _pouring.QInspect.GraphiteImg;
                    using (var ms = new MemoryStream(graphiteImgCurrent))
                    {
                        GraphiteImg.Image = Image.FromStream(ms);
                    }
                }
                else GraphiteImg.Image = null;
                if (_pouring.QInspect.MatrixImg != null)
                {
                    var matrixImgCurrent = _pouring.QInspect.MatrixImg;
                    using (var ms = new MemoryStream(matrixImgCurrent))
                    {
                        MatrixImg.Image = Image.FromStream(ms);
                    }
                }
                else MatrixImg.Image = null;
            }
--------------------------------------------------------------
20231202    frmSingleMelt.cs    >>>add
            private void FTestChem_StatusUpdate(object sender, StatusUpdateEventArgs e)
            
            private async void frmSingleMelt_Load(object sender, EventArgs e)   >>>add
            fTestChem.StatusUpdate += FTestChem_StatusUpdate;

            private void FTestChem_StatusUpdate(object sender, StatusUpdateEventArgs e)
            {
                string status = "   สถานะ : " + e.Status;
                tbxStatusBar.Text = status;
            }
--------------------------------------------------------------
20231202    frmTestChem.cs  >>>add
            private void SendStatusUpdate()
            {
                if (statusUpdateEventArgs.Status != "")
                {
                    StatusUpdate?.Invoke(this, statusUpdateEventArgs);
                    statusUpdateEventArgs.Status = "";
                }
            }