20231116	frmPouringIntoMold.cs	frmPouringIntoMold()	add	
            if(NewPouring.Defect == null)
                NewPouring.Defect = new DefectCause();
            if (NewPouring.QInspect == null)
                NewPouring.QInspect = new QAInspection();
--------------------------------------------------------------
202311182   LightTower_ChemicalInLader  LightTower_ChemicalInLader  add
            ModbusClient master; 
            public LightTower_ChemicalInLader()
            {
                master = new ModbusClient();
                master.Baudrate = 9600;
                master.Port = 4;
                master.ConnectionTimeout = 5000;
                try
                {
                    master.Connect();
                }
                catch 
                {
                    MessageBox.Show("ไม่สามารถเชื่อมต่อกับไฟแสดงสถานะค่าเคมีได้ โปรดตรวจสอบอุปกรณ์ใหม่อีกครั้ง");
                }
            }

            public void ResultChem(bool _isComplete, bool _isPassed, string _kanbanCode)
            {
                if (master.Connected | true)
                {
                    if (_isComplete)
                    {
                        FontDialog fontDialog = new FontDialog();
                    
                        if (_isPassed)
                        {
                            master.WriteSingleCoil(0, true);
                            master.WriteSingleCoil(1, false);

                            DialogResult dr = MessageBox.Show($"Kanban : {_kanbanCode}\nค่าเคมีผ่าน", "ผลการตรวจสอบค่าเคมี", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            if (dr == DialogResult.Yes)
                            {
                                master.WriteSingleCoil(0, false);
                                master.WriteSingleCoil(1, false);
                            }
                        }
                        else
                        {
                            master.WriteSingleCoil(0, false);
                            master.WriteSingleCoil(1, true);

                            DialogResult dr = MessageBox.Show($"Kanban : {_kanbanCode}\nค่าเคมีไม่ผ่าน โปรดทบทวนการเทน้ำเหล็ก", "ผลการตรวจสอบค่าเคมี", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            if (dr == DialogResult.Yes)
                            {
                                master.WriteSingleCoil(0, false);
                                master.WriteSingleCoil(1, false);
                            }
                        }
                    }
                }
            }
--------------------------------------------------------------
20231118    frmPouring  frmPouring_Load()   edit
            fPouring = new frmPouringIntoMold(Line, true);
--------------------------------------------------------------
20231118    frmPouringIntoMold  frmPouringIntoMold  edit
            private LightTower_ChemicalInLader lightChem;

            public frmPouringIntoMold(string _line, bool connectLight)
            {
                InitializeComponent();

                var url = Properties.Settings.Default.API_URL;
                _client = new Client(url);

                _pourings = new List<Pouring>();
                MeltInfo = new MeltingEventArgs();
                CurrentLotNo = new LotNo();
                CurrentKanban = new Kanban();
                CurrentControlPlan = new ControlPlan();
                CurrentPouring = new Pouring();
                CurrentPourStandard = new PourStandard();
                CurrentProduct = new Product();
                CurrentTooling = new Tooling();
                PLine = _line;

                lightChem = new LightTower_ChemicalInLader();
            }
            
            if(NewPouring.Defect == null)
                NewPouring.Defect = new DefectCause();
            if (NewPouring.QInspect == null)
                NewPouring.QInspect = new QAInspection();

            if(lightChem != null)
                        lightChem.ResultChem((bool)CurrentKanban.IsCompleted, (bool)CurrentKanban.IsPassed, CurrentKanban.Code);
--------------------------------------------------------------
20231121    frmMaterial startKwHrTextBox_TextChanged    edit
            tbKwHrPerCharge.Text = kwDiff.ToString();   
            --->    
            tbKwHrPerCharge.Text = string.Format("{0:0.00}", kwDiff);
--------------------------------------------------------------
20231122    frmTestChem.cs  testChemicalCompositionBindingSource_CurrentChanged()   edit
            MessageBox.Show("Unable to Load Data xxx", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            --->    
            string message = "Connection error.";
                if(prod.ControlPlans.Count == 0)
                {
                    message = "not have ControlPlans.";
                }
                MessageBox.Show($"Unable to Load Data becuase {message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
--------------------------------------------------------------
20231202    frmMaterial.cs  startKwHrTextBox_TextChanged()  edit
            tbKwHrPerCharge.Text = kwDiff.ToString();
            --->
            tbKwHrPerCharge.Text = string.Format("{0:0.00}", kwDiff);
--------------------------------------------------------------
20231202    frmQA.cs    
            >>>add
            private bool EditMode = false;
            private void GraphiteImg_DoubleClick(object sender, EventArgs e)
            private void MatrixImg_DoubleClick(object sender, EventArgs e)
            private void getImageCurrent(Pouring _pouring)
            >>>edit
            public frmQA(Pouring _pouring, Product _product) ---> public frmQA(Pouring _pouring, Product _product, MaterialSpecification _matSpec)
            public void ChangeMode(bool isEdit) ---> public void ChangeMode(bool isEdit, Pouring _pouring)
            
            public frmQA(Pouring _pouring, Product _product, MaterialSpecification _matSpec)    >>>add
            materialSpecificationBindingSource.DataSource = _matSpec;

            public void ChangeMode(bool isEdit, Pouring _pouring)   >>>add
            var listTextBox = this.pnHeader.Controls.OfType<TextBox>().ToList();
            for (int i = 0; i < listTextBox.Count(); i++)
            {
                listTextBox[i].ReadOnly = true;
            }

            EditMode = isEdit;
            if(EditMode)
            {
                getImageCurrent(_pouring);
                var defaultImg = MNG.UI.Properties.Resources.InsertImage;
                if(_pouring.QInspect.GraphiteImg == null)
                    GraphiteImg.Image = defaultImg;
                if(_pouring.QInspect.MatrixImg == null)
                    MatrixImg.Image = defaultImg;

                graphiteATextBox1.ReadOnly = false;
                nodularityTextBox.ReadOnly = false;
                sizeTextBox.ReadOnly = false;
                countTextBox.ReadOnly = false;
                ferriteTextBox.ReadOnly = false;
                pearliteTextBox.ReadOnly = false;
                cementiteTextBox.ReadOnly = false;
                hardnessTextBox.ReadOnly = false;
                tensileTextBox1.ReadOnly = false;
                yeildTextBox.ReadOnly = false;
                elongationTextBox1.ReadOnly = false;
            }

            public async void PouringIntoMoldChanged(object sender, MeltingEventArgs e) >>>add
            getImageCurrent(CurrentPouring);

            public async void EditItem()    >>>edit
            frmQA fQA = new frmQA(CurrentPouring, CurrentProduct);
            --->
            frmQA fQA = new frmQA(CurrentPouring, CurrentProduct, CurrentMatSpec);  >>>add
            try
            {
                await _client.PutPouringInspectionAsync(fQA.PouringItem.Code, fQA.PouringItem);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("201"))
                {

                }
                else
                {
                    MessageBox.Show("ERROR " + ex.Message, "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            finally
            {
                CurrentPouring = await _client.GetPouringByIdAsync(CurrentPouring.Code);
                pouringBindingSource.DataSource = CurrentPouring;
                getImageCurrent(CurrentPouring);
            }
            frmEditQC_Load(null, null);

            private void btnSave_Click_1(object sender, EventArgs e)    >>>add
            if (GraphiteImg.Image.RawFormat != null)
            {
                ImageConverter converter = new ImageConverter();
                PouringItem.QInspect.GraphiteImg = (byte[])converter.ConvertTo(GraphiteImg.Image, typeof(byte[]));
            }
            if (MatrixImg.Image.RawFormat != null)
            {
                ImageConverter converter = new ImageConverter();
                PouringItem.QInspect.MatrixImg = (byte[])converter.ConvertTo(MatrixImg.Image, typeof(byte[]));
            }
            private void GraphiteImg_DoubleClick(object sender, EventArgs e)
            {
            if(!EditMode) return;

            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                InitialDirectory = @"D:\",
                Title = "Browse Image Files",

                CheckFileExists = true,
                CheckPathExists = true,

                Filter = "Image files(*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png",
                RestoreDirectory = true,

                ReadOnlyChecked = true,
                ShowReadOnly = true
            };

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                Bitmap bit = new Bitmap(openFileDialog1.FileName);
                var destRect = new Rectangle(0, 0, 320, 240);
                var destImage = new Bitmap(320, 240);

                destImage.SetResolution(bit.HorizontalResolution, bit.VerticalResolution);

                using (var graphics = Graphics.FromImage(destImage))
                {
                    graphics.CompositingMode = CompositingMode.SourceCopy;
                    graphics.CompositingQuality = CompositingQuality.HighQuality;
                    graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    graphics.SmoothingMode = SmoothingMode.HighQuality;
                    graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                    using (var wrapMode = new ImageAttributes())
                    {
                        wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                        graphics.DrawImage(bit, destRect, 0, 0, bit.Width, bit.Height, GraphicsUnit.Pixel, wrapMode);
                    }
                }

                GraphiteImg.Image = destImage;
                }
            }

            private void MatrixImg_DoubleClick(object sender, EventArgs e)
            {
                if(!EditMode) return;

                OpenFileDialog openFileDialog1 = new OpenFileDialog
                {
                    InitialDirectory = @"D:\",
                    Title = "Browse Image Files",

                    CheckFileExists = true,
                    CheckPathExists = true,

                    Filter = "Image files(*.jpg, *.jpeg, *.png) | *.jpg; *.jpeg; *.png",
                    RestoreDirectory = true,

                    ReadOnlyChecked = true,
                    ShowReadOnly = true
                };

                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    Bitmap bit = new Bitmap(openFileDialog1.FileName);
                    var destRect = new Rectangle(0, 0, 320, 240);
                    var destImage = new Bitmap(320, 240);

                    destImage.SetResolution(bit.HorizontalResolution, bit.VerticalResolution);

                    using (var graphics = Graphics.FromImage(destImage))
                    {
                        graphics.CompositingMode = CompositingMode.SourceCopy;
                        graphics.CompositingQuality = CompositingQuality.HighQuality;
                        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        graphics.SmoothingMode = SmoothingMode.HighQuality;
                        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                        using (var wrapMode = new ImageAttributes())
                        {
                            wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                            graphics.DrawImage(bit, destRect, 0, 0, bit.Width, bit.Height, GraphicsUnit.Pixel, wrapMode);
                        }
                    }

                    MatrixImg.Image = destImage;
                }
            }

            private void getImageCurrent(Pouring _pouring)
            {
                if (_pouring.QInspect.GraphiteImg != null)
                {
                    var graphiteImgCurrent = _pouring.QInspect.GraphiteImg;
                    using (var ms = new MemoryStream(graphiteImgCurrent))
                    {
                        GraphiteImg.Image = Image.FromStream(ms);
                    }
                }
                else GraphiteImg.Image = null;
                if (_pouring.QInspect.MatrixImg != null)
                {
                    var matrixImgCurrent = _pouring.QInspect.MatrixImg;
                    using (var ms = new MemoryStream(matrixImgCurrent))
                    {
                        MatrixImg.Image = Image.FromStream(ms);
                    }
                }
                else MatrixImg.Image = null;
            }
--------------------------------------------------------------
20231202    frmSingleMelt.cs    >>>add
            private void FTestChem_StatusUpdate(object sender, StatusUpdateEventArgs e)
            
            private async void frmSingleMelt_Load(object sender, EventArgs e)   >>>add
            fTestChem.StatusUpdate += FTestChem_StatusUpdate;

            private void FTestChem_StatusUpdate(object sender, StatusUpdateEventArgs e)
            {
                string status = "   สถานะ : " + e.Status;
                tbxStatusBar.Text = status;
            }
--------------------------------------------------------------
20231202    frmTestChem.cs  >>>add
            private void SendStatusUpdate()
            {
                if (statusUpdateEventArgs.Status != "")
                {
                    StatusUpdate?.Invoke(this, statusUpdateEventArgs);
                    statusUpdateEventArgs.Status = "";
                }
            }
--------------------------------------------------------------
20240103    frmProduct.cs   
            >>>add
            public frmProduct(List<Product> _products, string productInFur)
            {
                InitializeComponent();

                ProdList = _products;

                var url = MNG.UI.Properties.Settings.Default.API_URL;
                _client = new Client(url);

                if (ProdList.Count != 0)
                    productBindingSource.DataSource = ProdList.OrderByDescending(x => x.Code);

                tbSearch.Text = productInFur;
                tbSearch_TextChanged(null, null);
            }

            frmCreateNewTest.cs 
            >>>add
            private int productIdInFur;
            private TestChemicalComposition _TestChem;
            private void btnOk_Click(object sender, EventArgs e)    productBindingSource.EndEdit();
            
            >>>edit
            public frmCreateNewTest(string newTest, int _productIdInFur)
            _TestChem = new TestChemicalComposition();
            productIdInFur = _productIdInFur;
            --->TestChem = new TestChemicalComposition();   >>> _TestChem = _CCETest;
            --->frmProduct fProduct = new frmProduct(products); >>>  string productInFur = "";
            if (productIdInFur != 0) 
               productInFur = products.Where(x => x.Id == productIdInFur).FirstOrDefault().Name;
            frmProduct fProduct = new frmProduct(products, productInFur);
            --->TestChem.ControlPlanId = ctp.Id;
            productBindingSource.DataSource = fProduct.SelectedProduct;
            productBindingSource.EndEdit();

            controlPlanBindingSource.DataSource = ctp;
            testChemicalCompositionBindingSource.DataSource = TestChem;

            btnOk.Enabled = true;
            PartNo = fProduct.SelectedProduct.Id ?? 0;  >>>
            PartNo = fProduct.SelectedProduct.Id ?? 0;
            _TestChem.ControlPlan = ctp;
            _TestChem.ControlPlanId = ctp.Id;
            _TestChem.Product = fProduct.SelectedProduct;
            _TestChem.ProductId = fProduct.SelectedProduct.Id ?? 0;

            productBindingSource.DataSource = _TestChem.Product;
            controlPlanBindingSource.DataSource = ctp;
            testChemicalCompositionBindingSource.DataSource = _TestChem;
            btnOk.Enabled = true;

            frmEditMatCharging.cs
            >>>edit
            private void GetPowerConsumtion()
            if (power <= 0 || start == 0 || stop == 0)  >>>
            if (power < 0 || start == 0 || stop == 0)
            if (power == 0)
                {
                    var result = MessageBox.Show("ค่า power เริ่มต้นเท่ากับสุดท้ายเท่ากัน ต้องการจะบันทึกเป็น Holding ใช่หรือไม่?", "บันทึกเป็น Holding", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (result == DialogResult.Yes)
                        CurrentCharge.Status = Status.Holding.ToString();
                    else
                    {
                        return;
                    }
                }

            frmLotNo.cs
            >>>edit
            var fCreateLotNo = new frmLotNoInfo(Furnace.Name);
            frmLotNoInfo.cs
            >>>add
            public frmLotNoInfo(string furnace)
            {
                InitializeComponent();
                cboShift.Items.Add("A");
                cboShift.Items.Add("B");
                cboFurnace.Items.Add("A");
                cboFurnace.Items.Add("B");
                cboFurnace.Items.Add("C");
                cboFurnace.Items.Add("D");
                cboFurnace.Items.Add("E");

                _furnace = furnace;
                cboFurnace.Text = furnace;
            }

            frmMaterial.cs
            >>>edit
            public async void CreateItem()  >>>add
            var ctp = (await _client.GetControlPlanByIdAsync(_chargeItem.ControlPlanId ?? 0));
                    if(ctp.ChemicalCompositionInFurnaceCode == null)
                    {
                        MessageBox.Show("รายการที่คุณเลือกใน Control plan ไม่มีการระบุค่าเคมีการในเตาหลอม โปรดเลือกรายการอื่น", "Warning!!!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

            frmPouringInfoMold.cs
            >>>edit
            private async void btnProductBrowse_Click(object sender, EventArgs e)
            var _currentKanban = (await _client.GetKanbanByIdAsync(NewPouring.KanbanCode));
            var productInFur = products.Where(x => x.ActiveControlPlanId == _currentKanban.ControlPlanId).FirstOrDefault().Name;

            frmProduct fProduct = new frmProduct(products, productInFur);
            frmQA.cs
            >>>edit
            QA_ColorTextBox(CurrentPouring, CurrentMatSpec);
            private void btnSave_Click_1(object sender, EventArgs e)
            QA_ColorTextBox(PouringItem, materialSpecificationBindingSource.DataSource as MaterialSpecification);
            private void QA_ColorTextBox(Pouring _pouring, MaterialSpecification _matSpec)
            if (_pouring.QInspect.GraphiteA >= _matSpec.GraphiteA) graphiteATextBox1.BackColor = Color.GreenYellow;
            else if(_pouring.QInspect.GraphiteA < _matSpec.GraphiteA & _pouring.QInspect.GraphiteA > 0) graphiteATextBox1.BackColor = Color.Red;
            else graphiteATextBox1.BackColor = Color.White;

            if (_pouring.QInspect.Nodularity >= _matSpec.NodularityMin) nodularityTextBox.BackColor = Color.GreenYellow;
            else if (_pouring.QInspect.Nodularity < _matSpec.NodularityMin & _pouring.QInspect.Nodularity > 0) nodularityTextBox.BackColor = Color.Red;
            else nodularityTextBox.BackColor = Color.White;
            
            if(_pouring.QInspect.Size >= _matSpec.SizeMin & _pouring.QInspect.Size <= _matSpec.SizeMax) sizeTextBox.BackColor = Color.GreenYellow;
            else if (_pouring.QInspect.Size < _matSpec.SizeMin || _pouring.QInspect.Size > _matSpec.SizeMax) sizeTextBox.BackColor = Color.Red;
            else sizeTextBox.BackColor = Color.White;

            if (_matSpec.NoduleCount == null || _pouring.QInspect.Count == 0) countTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Count >= _matSpec.NoduleCount ) countTextBox.BackColor = Color.GreenYellow;
            else countTextBox.BackColor = Color.Red;

            if (_matSpec.FerriteMax == null || _matSpec.FerriteMin == null || _pouring.QInspect.Ferrite == 0) ferriteTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Ferrite >= _matSpec.FerriteMin & _pouring.QInspect.Ferrite <= _matSpec.FerriteMax) ferriteTextBox.BackColor = Color.GreenYellow;
            else ferriteTextBox.BackColor = Color.Red;

            if (_matSpec.PearliteMin == null || _pouring.QInspect.Pearlite == 0) pearliteTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Pearlite >= _matSpec.PearliteMin & _pouring.QInspect.Pearlite <= _matSpec.PearliteMax) pearliteTextBox.BackColor = Color.GreenYellow;
            else pearliteTextBox.BackColor = Color.Red;

            if (_matSpec.CementiteMin == null || _pouring.QInspect.Cementite == 0) cementiteTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Cementite >= _matSpec.CementiteMin & _pouring.QInspect.Cementite <= _matSpec.CementiteMax) cementiteTextBox.BackColor = Color.GreenYellow;
            else cementiteTextBox.BackColor = Color.Red;

            if (_matSpec.HbMin == null || _pouring.QInspect.Hardness == 0) hardnessTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Hardness >= _matSpec.HbMin & _pouring.QInspect.Hardness <= _matSpec.HbMax) hardnessTextBox.BackColor = Color.GreenYellow;
            else hardnessTextBox.BackColor = Color.Red;

            if (_matSpec.Tensile == null || _pouring.QInspect.Tensile == 0) tensileTextBox1.BackColor = Color.White;
            else if(_pouring.QInspect.Tensile >= _matSpec.Tensile) tensileTextBox1.BackColor = Color.GreenYellow;
            else tensileTextBox1.BackColor = Color.Red;

            if (_matSpec.Yield == null || _pouring.QInspect.Yeild == 0) yeildTextBox.BackColor = Color.White;
            else if(_pouring.QInspect.Yeild >= _matSpec.Yield) yeildTextBox.BackColor = Color.GreenYellow;
            else yeildTextBox.BackColor = Color.Red;

            if (_matSpec.Elongation == null || _pouring.QInspect.Elongation == 0) elongationTextBox1.BackColor = Color.White;
            else if(_pouring.QInspect.Elongation >= _matSpec.Elongation) elongationTextBox1.BackColor = Color.GreenYellow;
            else elongationTextBox1.BackColor = Color.Red;

            frmTestChem.cs
            >>>edit
            public async void CreateItem()
            if (lastCharge.Total == null || lastCharge.Total == 0)
            {
                MessageBox.Show("Cannot Create New Test because of last charge not added Material", 
                                "Material is Zero!!!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                var fCreateNewTest = new frmCreateNewTest(newTestNo, (int)lastCharge.ProductId);
            public async void EditItemHeader()
             var testResultSelected = testChemicalCompositionBindingSource.Current as TestChemicalComposition;

            if (testResultSelected == null)
            {
                MessageBox.Show("Unable to Edit Current Test", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var prod = await _client.GetProductByIdAsync(testResultSelected.ProductId ?? 0);
            int controlPlanId = prod.ActiveControlPlanId ?? default(int);
            var ctp = (await _client.GetControlPlanByIdAsync(controlPlanId)) as ControlPlan;
            var chemInFur = (await _client.GetChemicalCompositionInFurnaceByIdAsync(ctp.ChemicalCompositionInFurnaceCode));

            frmCreateNewTest fTest = new frmCreateNewTest(testResultSelected.Code, prod, chemInFur, testResultSelected, ctp);
            if (ctp.Id != fTest.TestChem.ControlPlanId)
                {
                    var _kanban = (await _client.GetKanbanByTestNoAsync(testResultSelected.Code)).LastOrDefault();
                    if (_kanban != null)
                    {
                        var changeChemInTapping = MessageBox.Show("ต้องการเปลี่ยน Control plan ใน Tapping ด้วยใช่หรือไม่?", "เปลี่ยน Control plan ของ Tapping", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (changeChemInTapping == DialogResult.Yes)
                        {
                            var _ctp = (await _client.GetControlPlanByIdAsync((int)testResultSelected.ControlPlanId));
                            _kanban.ControlPlanId = testResultSelected.ControlPlanId;
                            _kanban.ControlPlan = _ctp;
                            try
                            {
                                await _client.PutKanbanAsync(_kanban.Code, _kanban, _kanban.ControlPlan.ChemicalCompositionInLadleCode, _kanban.ControlPlan.PouringCode);
                            }
                            catch (Exception ex)
                            {
                                if (ex.Message.Contains("201"))
                                {

                                }
                                else
                                {
                                    MessageBox.Show($"ERROR {ex}", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                        }
                    }
                }
            private void codeTextBox_DoubleClick(object sender, EventArgs e)
            {
                codeTextBox.SelectAll();
                codeTextBox.Copy();
            }

            Status.cs
            >>>add
            Holding

            StatusTextBox.cs
            case "Holding":
                        timer1.Stop();
                        BackColor = Color.Orange;
                        ForeColor = Color.FromName("black");
                        break;

--------------------------------------------------------------
